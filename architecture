This file is about the architecture of this game.
====================================================
1.For How to build up libgdx environment , please refer to libgdx wiki page here: 
http://code.google.com/p/libgdx/  
and this reference tutorial(a perfect tutorial for game programming):
http://obviam.net/index.php/table-of-contents/

2.What is a game program? First, it is a program, 
for any platform (Max,Windows,Linux,iOS,Android...)
it is an application first.Different platforms similarly
has an entry point for this application.For example,
We konw that on Android , every application can has a 
main Activity and that's the entry point for this apk.
This component is provide by android platform , so you 
only need to extends it and you have an basic application,
you can add others things to implement something.
Other platforms are similar.

For a game program, it is just the entry point plus the 
game itself(game contents including game logic , resoruce ,
and all about this game.). For different platforms , entry 
points are different, but game itself is same( of cause,
you can implement it  depend on different platforms, but 
this will const much more efforts and painful to maintain).
If we can implement game itsef independent of platforms, it will 
be very pleasure, libgdx just do this, it will generate entry 
points code for different platforms in different folder and 
code about game itself in a seperate folder, platform code will 
use a very simple code to reference the whole game itsef.

for example: 
In this simple project , there are folders:
superjump 
superjump-android
superjump-html
superjump-ios 

The entry point for android , web html and ios code generate in 
the relative folder, the game itself is in superjump folder which 
is platform independent.Let's see superjump-android: 

public class SuperJumperAndroid extends AndroidApplication {
        /** Called when the activity is first created. */
        @Override
        public void onCreate (Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                initialize(new SuperJumper(), false);
        }
}

There is very simple code here:
SuperJumpAndroid extends from AndroidApplication.
The SuperJumper() is refer to code in superjump folder.

whant is the AndroidApplication ? any relationship with android?
Do you remember that main Activity is the entry point of
an android application ? Yes, AndroidApplication just is a subClass of Activity.
Here is the implementation of AndroidApplication in libgdx.

/** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In
 * the {@link Activity#onCreate(Bundle)} method call the {@link #initialize(ApplicationListener, boolean)} method specifying the
 * configuration for the GLSurfaceView.
 *
 * @author mzechner */
public class AndroidApplication extends Activity implements Application {
           ......
}

So, it isn't strange we have so less code in SuperJumpAndroid.Thanks to framework libgdx.

The SuperJumper() is refer to code in superjump folder.

3.About the SuperJumper.
First let's see what is in a game from a player's perspective.
when the player open the game , he will see an screen with main
menus(as play,help,scores,settings and so on) which we call it main screen,
if player press play , it will enter a new screen which display
the core content of the game which we called game screen (from main screen to core game screen
there maybe more screens if game has several modes or levels).Similarly for help,
scores,settings there also have screens as help screen, scores screen,settings screen.
Maybe not one screen for each one. Now we see , a game is composed by several screens, the main
screen connects all other screens, other screens may be connected with each other.
All game objects , neither dynamic or static, all displayed on the screens, the dynamic things
contains not only objects, but also their status , their behaviors, which is the game logic.
Is there any other things here in a game ? maybe music and player's data.

Now based the basic view of a player , let's have a look at the code architecture.
Under the super-jumper folder:
data contains the resources(pictures,fonts,music)
libs contains the gdx libraries.
src  contains all the source file.
data and libs are easy to understand, let's have a look at the source files:
under the package com.badlogicgames.superjumper:
SuperJumper.java is the main entery of this game, SuperJumper extends from gdx class Game which implement Application interface play the role of the entry of an application.
MainMenuScreen.java GameScreen.java HelpScreen*.java HighscoresScreen.java  are the abstract of the screens we just talked previously.
GameObject.java DynamicGameObject.java Bob.java Castle.java Coin.java Platform.java Spring.java Squirrel.java just the objects we seen in the game screens.
World.java just combines all the objects making up the game world.
WorldRender.java used for render the whole world.
Settings.java record the player's data(music setting ,scores and so on)
Assets.java used to load all the resources.
Animation.java used to control how to animate from one state to another state.
OverlapTest.java is just to tool to judge whether two objects have collided.




