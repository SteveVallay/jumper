This file is about the architecture of this game.
====================================================
1.For How to build up libgdx environment , please refer to libgdx wiki page here: 
http://code.google.com/p/libgdx/  
and this reference tutorial(a perfect tutorial for game programming):
http://obviam.net/index.php/table-of-contents/

2.What is a game program? First, it is a program, 
for any platform (Max,Windows,Linux,iOS,Android...)
it is an application first.Different platforms similarly
has an entry point for this application.For example,
We konw that on Android , every application can has a 
main Activity and that's the entry point for this apk.
This component is provide by android platform , so you 
only need to extends it and you have an basic application,
you can add others things to implement something.
Other platforms are similar.

For a game program, it is just the entry point plus the 
game itself(game contents including game logic , resoruce ,
and all about this game.). For different platforms , entry 
points are different, but game itself is same( of cause,
you can implement it  depend on different platforms, but 
this will const much more efforts and painful to maintain).
If we can implement game itsef independent of platforms, it will 
be very pleasure, libgdx just do this, it will generate entry 
points code for different platforms in different folder and 
code about game itself in a seperate folder, platform code will 
use a very simple code to reference the whole game itsef.

for example: 
In this simple project , there are folders:
superjump 
superjump-android
superjump-html
superjump-ios 

The entry point for android , web html and ios code generate in 
the relative folder, the game itself is in superjump folder which 
is platform independent.Let's see superjump-android: 

public class SuperJumperAndroid extends AndroidApplication {
        /** Called when the activity is first created. */
        @Override
        public void onCreate (Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                initialize(new SuperJumper(), false);
        }
}

There is very simple code here:
SuperJumpAndroid extends from AndroidApplication.
The SuperJumper() is refer to code in superjump folder.

whant is the AndroidApplication ? any relationship with android?
Do you remember that main Activity is the entry point of
an android application ? Yes, AndroidApplication just is a subClass of Activity.
Here is the implementation of AndroidApplication in libgdx.

/** An implementation of the {@link Application} interface for Android. Create an {@link Activity} that derives from this class. In
 * the {@link Activity#onCreate(Bundle)} method call the {@link #initialize(ApplicationListener, boolean)} method specifying the
 * configuration for the GLSurfaceView.
 *
 * @author mzechner */
public class AndroidApplication extends Activity implements Application {
           ......
}

So, it isn't strange we have so less code in SuperJumpAndroid.Thanks to framework libgdx.

The SuperJumper() is refer to code in superjump folder.

3.About the SuperJumper.
First let's see what is in a game from a player's perspective.
when the player open the game , he will see an screen with main
menus(as play,help,scores,settings and so on) which we call it main screen,
if player press play , it will enter a new screen which display
the core content of the game which we called game screen (from main screen to core game screen
there maybe more screens if game has several modes or levels).Similarly for help,
scores,settings there also have screens as help screen, scores screen,settings screen.
Maybe not one screen for each one. Now we see , a game is composed by several screens, the main
screen connects all other screens, other screens may be connected with each other.
All game objects , neither dynamic or static, all displayed on the screens, the dynamic things
contains not only objects, but also their status , their behaviors, which is the game logic.
Is there any other things here in a game ? maybe music and player's data.

Now based the basic view of a player , let's have a look at the code architecture.
Under the super-jumper folder:
data contains the resources(pictures,fonts,music)
libs contains the gdx libraries.
src  contains all the source file.
data and libs are easy to understand, let's have a look at the source files:

under the package com.badlogicgames.superjumper:
SuperJumper.java is the main entery of this game, SuperJumper extends from gdx class Game which implement Application interface play the role of the entry of an application.

MainMenuScreen.java 
GameScreen.java 
HelpScreen*.java 
HighscoresScreen.java  

are the abstract of the screens we just talked previously.

GameObject.java 
DynamicGameObject.java 
Bob.java
Castle.java 
Coin.java 
Platform.java 
Spring.java 
Squirrel.java 

just the objects we have seen in the game screens.

World.java just combines all the objects making up the game world.

WorldRender.java used for render the whole world.

Settings.java record the player's data(music setting ,scores and so on)

Assets.java used to load all the resources.

Animation.java used to control how to animate from one state to another state.

OverlapTest.java is just to tool to judge whether two objects have collided.

4.Detail code:Let's begin to enter the world of code. 
SuperJumper.java is the entry. SuperJumper class just extends from gdx Game class.

Let's have a look at the docs about the Game class:  
An ApplicationListener that delegates to a Screen. This allows an application to easily have multiple screens.

With this class's interface setScreen(), we can switch from an old  screen to a new screen.

In SuperJumper :
create:
 -load settings.
 -load resources.
 -set main screen.
render: 
 -will be called in a loop to render geme views.
dispose:
 -dismiss screens.
 -save settings.
In MainMenuScreen:
constructor: 
 -? not understand this OrthographicCamera.
 -SpriteBatch ,batcher, understand this can compose many Sprites. 
 -xxxBounds are the position of the rectangle for the view on the screen.
 -touchPoint :used to get touch event position.

render: this func will be called in a loop to render this screen all the time when this screen shows. 
 -update:update the models 
 -drawï¼šdraw the views.
 
update: 
 -if get the touch event: 
  -touch position in play bounds, go to GameScreen.
  -touch position in high scores bounds, go to HighscoresScreen.
  -touch position in help bounds,go to HelpScreen.
  -touch position in sound bounds, enable/disable sound .
draw:
 -? not understand the gl operation , guiCam operation and batcher.setProjectionMatrix.
 -draw  background.
 -draw logo, main menu, sound icon sequentially.notice that batcher.enableBlending, to make 
  sure when put A view on B view , A's background will be transparent.

In GameScreen:
 = game status:  ready , running ,paused,level-end,game-over .
 = refer game: every screen has a reference to game object. 
 =?OrthographicCamera guiCam, touchPoint, spriteBatch similiar with MainMenuScreen.
 = world,compose all objects,that is the world of the game.
 = worldRender, render  the whole world.
 = worldListener:listen to event and play sound.
 = xxxBounds are bounds of pause,resume,quit rectangle.
 = scores : score of coins and height.

--Let's start from the render loop: 
render :
 -update: update data.
 -draw : draw  the world. 
update:
 -not sure about the deltaTime, it's related to control the fps.
 -update data according to game status.this seems a simple finite state machine,
   just updating data according to a status.Also status change duing the update.
   -updateReady:
     -ready will change to running if anywhere touched.
   -updateRunning:?deltaTime 
     -if pause area touched , to to pause status.
     -updating world data , passing the accelerometerX.
     -update socres.
     -update status according world's state.
   -updatePaused:
     -resume to running state, quit to main menu.
   -updateLevelEnd:
     -create a new world,world render , set game state to ready.(this is suppose to start the game again since there is only one level)
     -@I think there should be an interface nextLevel in the world or Level_2_World extends world to generate another level.
   -updateGameOver:
     -touch anywhere to go to main meun screen.
draw:
  -?opengl related set.not understand.	
  -worldRender render.(update orthgraphiccamera, when bob's position up to position of this camera. player just look through this camera, so when bob jumps, move up 
   camera , you will see the things according to bob's position)
  -?guiCam.update ,batcher.setProjectionMatrix .batcher.enableBlending
  -game ready: 
    -draw ready texture area.
  -game running: 
    -draw pause and score texture areas.
  -game paused: 
    -draw menus(resume ,quit)
  -game level end: 
    -draw "pricess is in another castle"
  -game over: 
    -draw game over and score.

In HighscoresScreen:
constructor:
  -initialize guiCam,back bounds(back arrow to main screen),touchPoint,spriteBatch.
  -get top five height scores and format them.
  - 
render: main loop 
  -update:touch back arrow to back to main menu screen.
  -draw:
    -guiCam update.
    -draw background.
    -draw highscore region.
    -draw height scores.
    -back arrow.
In HelpScreenX:
constructor:
  -initialize guiCam, next bounds,touchPoint,spriteBatch,help image,help region.
render:
  -update:if next arrow touched , go to next help.
  -draw:draw help image and next arrow.
    -?gl.Disable(GL10.GL_BLEND).
 
In World:

interface: world listener(listen to bob's hit events)
variables:
  -world width 10 ? not understand this value , but this value just match worldRender's width. so I think this have no
   reltionship with the true width of devices.(if diaplay is 320x480 , this 10 match to 32,so height is 15)
  -world height 15*20, 20s of screen height.
  -world state:
    -running
    -next level
    -game over.
  -grivity:the free fall grivity.

  -bob.
  -platforms
  -springs
  -squirrels
  -coins.
  -castle

  -rand:for random
  -heightSoFar, record bob's height.
  -score:collected coins.

constructor:
  -initialize game objects: bob,platforms,springs,squirrels,coins.
  -generateLevel
    -generate game objects.
  -initialize heightSoFar,score,state.
generateLevel:
  -maxJumpHeight = v^2/2g(since gt^2/2 = height, gt = v, according to free fall)
  -loop y to world height to generate  objects.
    -random the platforms' type
    -random the platforms' position , notice that the (x,y) of platfom is its center position.
    -random springs, springs position just up the platforms,(center of springs(y) = center of platfom + half platform + half spring).
    -random squirrels, squirrels' position will up more to platfoms.
    -random coins,  coins will up more to platforms.
    -plus y in loop, plus maxJumpHeight-0.5 and minus of (maxJumpHeight)/3. to make sure every jump can met an platfom.
  -castle is at the top of the world.
update:
 -updateBob
   -calculate bob's velocity according to the accelerometerX,bob.update().calculate heightSoFar.
 -updatePlatform
   -remove platforms pulverized.
 -updateSquirrels.
   -squirrels.update
 -updateCoins
   -coins.update
 -checkCollisions
   -checkPlatformCollisions: if bob's velocity < 0 and collided with platform, bob hit platform.
   -checkSquirrelsCollisions: bob hit squirrels.
   -checkItemCollisions:
     -collect coins.
     -if bob's velocity < 0 and collided with springs, bob's hit springs.
   -checkCastle Collisions: if bob collided with castle, next level then.
 -checkGameOver:height so far -7.5(half screen height) > bob.height which means bob fall down low to screen bottom. game over.
 -convertHeightFormat : display a beautiful number for player.
WorldRender:
 -variables
   -FRUSTUM_WIDTH,10,FRUSTUM_HEIGHT,15.
   -World
   -OrthographicCamera.
   -SpriteBatch
   -texture,background
 -construct:
   -initialization world,cam,batch.
 -render:
   -if bob's position higher than cam's position , need move up cam to focus screen to bob as center.(this means screen will 
    move up with bob).
   -update cam , set upp batch.
   -renderBackground.
   -renderObject
 -renderBackground:
   -just draw background full of the cam.(notice that the cam's position will updated to bob's position of the world)
 -renderObjects: when render multiple objects notice the sequence.
   -renderBob : draw bob according to bob's state.(two kind of draw , in animation and not in animation)
   -renderPlatforms : draw platform according to platform'state.
   -renderItems : draw springs, coins
   -renderSequirrels : draw squirrels.
   -renderCastle: draw castle.
In GameObject
 -now let's see the game objects, what is a game object contains.
 -position,(x,y).
 -bounds, a rectangle stands for the area a game object take place.
In DynamicGameObject
 -DynamicGameObject extends from GameObject add some dynamic attributes: velocity and acceler.
 -velocity (x,y)
 -accel(x,y)
In Castle: a simple game object.
 -castle width and castle height.
In Coin: a simple game object will display as animation
 -width, height,score.
 -also with a stateTime , used for animation.
In Spring: a simple game object.
 -width,height.
In Squirrel: a dynamic game object animation.
 -width,height,velocity.
 -update,update position dual to velocity, update bounds dual to position, update position and velocity if out of screen.
 -update stateTime to display animation
In Bob: a dynamic game object with velocity, animation and state. 
 -state:
  -jump,fall,hit
 -velocity:
  -jump velocity(y), move velocity(x)
 -width, height
 -update: 
   -update bob's velocity dual to world's gravity.
   -update bob's positon dual to bob's velocity.
   -update bob's bounds dual to bob's position.
   -if bob's velocity.y > 0 and not hit, bob's state is jump.
   -if bob's velocity.y < 0 and not hit, bob's state is fall.
   -if position.x out of screen, reset it.
 -hitSquirrle: if bob hit squirrle , bob status to hit and velocity will be 0.
 -hitPlatform: reset bob's velocity.y.
 -hitSpring: reset bob's velocity.y up to 1.5 times.
In Animation: 
 -constructor: display frames every frame duration.
 -getKeyFrame: get frame according to time.
In Assets:
 -load textures, textures regions, animation, bitmap font, music and sound.
In OverlapTester: 
 -judge two rectangles overlap.
In Settings:
 -sound setting, scores settings.

